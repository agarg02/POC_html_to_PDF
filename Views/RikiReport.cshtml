@using System
@using System.Globalization;
@using System.Collections.Generic
@using System.Linq;
@using JSON_To_PDF.Model;
@using static JSON_To_PDF.Response.Result;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>RIKI Reports</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700;900&display=swap" rel="stylesheet" />
    <style>
        .main-table {
            margin: 0px -20px -20px -20px;
            padding: 0px;
            font-family: "Roboto", sans-serif;
            background-color: #fff;
        }

        .calender-table th {
            padding: 5px 6px;
            font-size: 11px;
            white-space: nowrap;
        }

        /*style="border: 1.5px solid #999; padding: 12px; border-radius: 10px; width: 100%;"*/
        .table-border {
            border: 1.5px solid #999;
            padding: 12px;
            border-radius: 10px;
            width: 100%;
        }

        .td-border {
            font-family: 'Roboto', sans-serif;
            font-size: 10px;
            border-radius: 4px;
            border: 1.5px solid #ddd;
            padding: 5px 10px;
            white-space: nowrap;
        }

        tr {
            page-break-inside: avoid;
        }
    </style>
</head>
<body style="background-color:  white; ">


    <table border-spacing="0" cellpadding="0" cellspacing="0" class="main-table" style="width: 100%;  margin-top : 40px">
        <tr>
            <td colspan="2">
                <table style="width: 100%">
                    <tr>
                        <td style=" text-align: left; vertical-align: text-top; padding-top: 20px;">
                            <p style="margin: 0; font-size: 22px; font-weight: 600;">
                                RIKI™ Report
                            </p>
                            <p style="margin: 0 0 30px; font-size: 17px; color: #ccc;">
                                Alternative Data Intelligence
                            </p>
                            <p style="margin: 0; letter-spacing: 1px; font-size: 30px; color: #000; font-weight: 600; font-family: 'Roboto', sans-serif;">
                                @(Model.Consumer != null ? $"{Model.Consumer?.FirstName} {Model.Consumer?.LastName}" : "N/A")
                            </p>
                        </td>
                        <td style="width: 50%;  text-align: left;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Report Information
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        Report ID
                                    </td>
                                    <td style="padding: 8px 0 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        @(Model.RequestedReportId != null ? $"{Model.RequestedReportId}" : "N/A")
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 8px 0 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        Report Date
                                    </td>
                                    <td style="padding: 8px 0 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        @(Model.DateProcessed != null ? $"{Model.DateProcessed.ToShortDateString()}" : "N/A")
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        Email
                                    </td>
                                    <td style="padding: 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        @(Model.Consumer != null && Model.Consumer?.Email.Count > 0 ? $"{Model.Consumer?.Email[0]}" : "N/A")
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px 15px 5px 0; font-size: 11px; white-space: nowrap; font-family: 'Roboto', sans-serif;">
                                        Phone Number
                                    </td>
                                    <td style="padding: 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        @(Model.Consumer != null ? $"{Model.Consumer?.PhoneNumber}" : "N/A")
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 5px 0; font-size: 11px; vertical-align: text-top; font-family: 'Roboto', sans-serif;">
                                        History Available
                                    </td>
                                    <td style="padding: 5px 0; font-size: 11px; font-family: 'Roboto', sans-serif;">
                                        @{
                                            string numberOfDays = "N/A";
                                            @if (Model.CalendarMonthStatistics!= null && Model.CalendarMonthStatistics.Count > 0)
                                            {
                                                TimeSpan difference = @Model.CalendarMonthStatistics[0].LastDayOfLastFullMonthCovered -
                                                @Model.CalendarMonthStatistics[0].BeginningOfFirstMonth;
                                                numberOfDays = difference.TotalDays.ToString();
                                            }
                                        }
                                        @numberOfDays Days

                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding-bottom: 15px;">
                <p style="font-size: 20px; font-weight: 500; margin: 0;">
                    Ability to Pay Metrics
                </p>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 50%; padding-right: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        RIKI Index
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 35px; font-weight: 500; text-align: center;">
                                            @(Model.RikiData != null ? $"{Model.RikiData?.RIKI}" : "N/A")
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0; font-weight: 500;">
                                            @(Model.RikiData != null ? $"{Model.RikiData?.RIKIasWords}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0;">
                                            Weighted combination of cash flow and income. Scale
                                            <br />
                                            centered on 100.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 50%; padding-left: 10px; white-space: nowrap; vertical-align: text-top;">
                            <table style="border: 1.5px solid #999; padding: 12px 12px 42px; border-radius: 10px; width: 100%;">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        RIKI Trend
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 35px; font-weight: 500; text-align: center;">
                                            N/A

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0;">
                                            Trending up by 1.5 points monthly
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding-top: 20px;">
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 50%; padding-right: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2" style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Cash Flow Index
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 35px; font-weight: 500; text-align: center;">
                                            @(Model.RikiData != null ? $"{Model.RikiData?.CashFlowIndex}" : "N/A")
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0;">
                                            Normal range (interquartile range) is 100-115
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 50%; padding-left: 10px; white-space: nowrap; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Cash Flow Index Trend
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 35px; font-weight: 500; text-align: center;">
                                            @(Model.RikiData != null ? $"{Model.RikiData?.CashFlowIndexTrend}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0;">

                                            @(Model.RikiData != null ? (float.IsNaN(Model.RikiData?.CashFlowIndexTrend) ? @Model.RikiData?.CashFlowIndexTrend :
                                                (Model.RikiData?.CashFlowIndexTrend >= 0 ? $"Up {@Model.RikiData?.CashFlowIndexTrend} points monthly" :
                                                $"Down {@Model.RikiData?.CashFlowIndexTrend} points monthly")) : "N/A"
                                                )
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>

            <td colspan="2" style="padding-top: 30px 0;">
                @*daysinmonth table start*@
                <table class="calender-table" style="width: 100%; padding-top:5px; border-spacing: 5px;">
                    @{
                        List<HeaderResponse> UniqueFormattedDates = new List<HeaderResponse>();
                        List<HeaderResponse> FilteredValue = new List<HeaderResponse>();
                        @if (@Model.CalendarMonthStatistics != null)
                        {
                            @*header start*@
                            <tr style="font-family: 'Roboto', sans-serif;width:max-content">
                                <th></th>

                                @foreach (var calendar in @Model.CalendarMonthStatistics)
                                {
                                    DateTime parsedDate;
                                    if (DateTime.TryParseExact(calendar.Label, "M/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate))
                                    {
                                        string formattedDate = parsedDate.ToString("MMM-yy");

                                        HeaderResponse uniqueformatteddate = new HeaderResponse();
                                        uniqueformatteddate.ActualValue = DateTime.ParseExact(calendar.Label, "MM/yyyy", null);
                                        uniqueformatteddate.FormattedValue = formattedDate;
                                        UniqueFormattedDates.Add(uniqueformatteddate);
                                    }
                                }

                                @if (UniqueFormattedDates.Count > 0)
                                {
                                    FilteredValue = (UniqueFormattedDates.OrderByDescending(date => date.ActualValue).Take(6).ToList()).OrderBy(date => date.ActualValue).ToList();

                                    @foreach (var filter in FilteredValue)
                                    {
                                        <th style="font-family: 'Roboto', sans-serif; text-align: right; font-weight: 500; border-radius: 4px; background-color: #919191; color: #fff;">
                                            @filter.FormattedValue
                                        </th>
                                    }
                                    <th style="font-family: 'Roboto', sans-serif; text-align: right; font-weight: 500; border-radius: 4px; background-color: #919191; color: #fff;">
                                        Avg
                                    </th>
                                }

                            </tr>
                            @*HeaderDictionary end*@

                            @*days in month start*@
                            <tr>
                                <td class="td-border">
                                    Days in Month
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;
                                                            ">
                                                        @Model.CalendarMonthStatistics[index].MonthlyStatistics[index].DaysInMonth
                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;
                                                            ">
                                    </td>
                                }

                            </tr>
                            @*days in month end*@

                            @*@MonthlyDataCompleteness start*@
                            <tr>
                                <td class="td-border">
                                    Data Completeness
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueMonthlyDataCompleteness = 0;
                                    int totalCountMonthlyDataCompleteness = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style=" text-align: right;">
                                                        @Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].MonthlyDataCompleteness), 2)
                                                    </td>
                                                    ++totalCountMonthlyDataCompleteness;
                                                    totalValueMonthlyDataCompleteness += (decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].MonthlyDataCompleteness;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountMonthlyDataCompleteness != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueMonthlyDataCompleteness / totalCountMonthlyDataCompleteness),2)
                                        }
                                    </td>
                                }
                            </tr>
                            @*MonthlyDataCompleteness end*@

                            @*AccountsTracked start*@
                            <tr>
                                <td class="td-border">
                                    # Accounts Tracked
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueAccountsTracked = 0;
                                    int totalCountAccountsTracked = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        @Model.CalendarMonthStatistics[index].MonthlyStatistics[index].AccountsTracked
                                                    </td>
                                                    ++totalCountAccountsTracked;
                                                    totalValueAccountsTracked += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].AccountsTracked;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountAccountsTracked != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueAccountsTracked / totalCountAccountsTracked), 2)
                                        }
                                    </td>
                                }
                            </tr>
                            @*AccountsTracked end*@

                            @*IncomeTransactions start*@
                            <tr>
                                <td class="td-border" ">
                                    # Income Transactions
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueIncomeTransactions = 0;
                                    int totalCountIncomeTransactions = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        @Model.CalendarMonthStatistics[index].MonthlyStatistics[index].IncomeTransactions
                                                    </td>
                                                    ++totalCountIncomeTransactions;
                                                    totalValueIncomeTransactions += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].IncomeTransactions;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountIncomeTransactions != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueIncomeTransactions / totalCountIncomeTransactions), 2)
                                        }
                                    </td>
                                }

                            </tr>
                                @*IncomeTransactions end*@

                                @*ExpenseTransactions start*@
                            <tr>
                                <td class="td-border" ">
                                    # Expense Transactions
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueExpenseTransactions = 0;
                                    int totalCountExpenseTransactions = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].ExpenseTransactions
                                                    </td>
                                                    ++totalCountExpenseTransactions;
                                                    totalValueExpenseTransactions += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].ExpenseTransactions;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountExpenseTransactions != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueExpenseTransactions / totalCountExpenseTransactions), 2)
                                            //$

                                        }
                                    </td>
                                }

                            </tr>
                            @*ExpenseTransactions end*@

                            @*TotalAmountIncomeTransactions start*@
                            <tr>
                                <td class="td-border" ">
                                    Total Income
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueTotalAmountIncomeTransactions = 0;
                                    int totalCountTotalAmountIncomeTransactions = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].TotalAmountIncomeTransactions
                                                    </td>
                                                    ++totalCountTotalAmountIncomeTransactions;
                                                    totalValueTotalAmountIncomeTransactions += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].TotalAmountIncomeTransactions;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountTotalAmountIncomeTransactions != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueTotalAmountIncomeTransactions / totalCountTotalAmountIncomeTransactions), 2)
                                            //$

                                        }
                                    </td>
                                }

                            </tr>
                                @*TotalAmountIncomeTransactions end*@

                                @*TotalAmountExpenseTransactions start*@
                            <tr>
                                <td class="td-border" ">
                                    Total Expenses
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueTotalAmountExpenseTransactions = 0;
                                    int totalCountTotalAmountExpenseTransactions = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].TotalAmountExpenseTransactions
                                                    </td>
                                                    ++totalCountTotalAmountExpenseTransactions;
                                                    totalValueTotalAmountExpenseTransactions += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].TotalAmountExpenseTransactions;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountTotalAmountExpenseTransactions != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueTotalAmountExpenseTransactions / totalCountTotalAmountExpenseTransactions), 2)
                                            //$
                                        }
                                    </td>
                                }

                            </tr>
                            @*TotalAmountExpenseTransactions end*@

                            @*Total Money Handled start*@
                            <tr>
                                <td class="td-border">
                                    Total Money Handled
                                </td>
                                @if (FilteredValue.Count > 0)
                                {
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        -
                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                }
                                <td class="td-border" style="text-align: right;">
                                </td>

                            </tr>
                            @*Total Money Handled end*@

                            @*LargestSingleTransactionNotAcctToAcctTransfers start*@
                            <tr>
                                <td class="td-border">
                                    Largest Transaction
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueLargestSingleTransactionNotAcctToAcctTransfers = 0;
                                    int totalCountLargestSingleTransactionNotAcctToAcctTransfers = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].LargestSingleTransactionNotAcctToAcctTransfers
                                                    </td>
                                                    ++totalCountLargestSingleTransactionNotAcctToAcctTransfers;
                                                    totalValueLargestSingleTransactionNotAcctToAcctTransfers += (decimal)@Model.CalendarMonthStatistics[index].MonthlyStatistics[index].LargestSingleTransactionNotAcctToAcctTransfers;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountLargestSingleTransactionNotAcctToAcctTransfers != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueLargestSingleTransactionNotAcctToAcctTransfers / totalCountLargestSingleTransactionNotAcctToAcctTransfers), 2)
                                            //$
                                        }

                                    </td>
                                }
                            </tr>
                            @*LargestSingleTransactionNotAcctToAcctTransfers end*@

                            @*EstimatedDiscretionarySpending start*@
                            <tr>
                                <td class="td-border">
                                    Discretionary Spending
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueEstimatedDiscretionarySpending = 0;
                                    int totalCountEstimatedDiscretionarySpending = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].EstimatedDiscretionarySpending), 2)
                                                    </td>
                                                    ++totalCountEstimatedDiscretionarySpending;
                                                    totalValueEstimatedDiscretionarySpending += (decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].EstimatedDiscretionarySpending;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountEstimatedDiscretionarySpending != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueEstimatedDiscretionarySpending / totalCountEstimatedDiscretionarySpending),2)
                                            //$
                                        }
                                    </td>
                                }
                            </tr>
                            @*EstimatedDiscretionarySpending end*@

                            @*% Disc. Spending start*@
                            <tr>
                                <td class="td-border">
                                    % Disc. Spending
                                </td>
                                @if (FilteredValue.Count > 0)
                                {
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        -
                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                }
                                <td class="td-border" style="text-align: right;">
                                </td>
                            </tr>
                            @*% Disc. Spending end*@

                            @*UnadjustedAvailableIncome start*@
                            <tr>
                                <td class="td-border" ">
                                    Available Income
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueUnadjustedAvailableIncome = 0;
                                    int totalCountUnadjustedAvailableIncome = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].UnadjustedAvailableIncome), 2)

                                                    </td>
                                                    ++totalCountUnadjustedAvailableIncome;
                                                    totalValueUnadjustedAvailableIncome += (decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].UnadjustedAvailableIncome;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountUnadjustedAvailableIncome != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueUnadjustedAvailableIncome / totalCountUnadjustedAvailableIncome),2)
                                            //$
                                        }
                                    </td>
                                }
                            </tr>
                                @*UnadjustedAvailableIncome end*@

                                @*AdjustedAvailableIncome start*@
                            <tr>
                                <td class="td-border" ">
                                    Adjusted Av. Income
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueAdjustedAvailableIncome = 0;
                                    int totalCountAdjustedAvailableIncome = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].AdjustedAvailableIncome), 2)

                                                    </td>
                                                    ++totalCountAdjustedAvailableIncome;
                                                    totalValueAdjustedAvailableIncome += (decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].AdjustedAvailableIncome;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountAdjustedAvailableIncome != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueAdjustedAvailableIncome / totalCountAdjustedAvailableIncome),2)
                                            //$
                                        }
                                    </td>
                                }
                            </tr>
                            @*AdjustedAvailableIncome end*@

                            @*AvgDailySpending start*@
                            <tr>
                                <td class="td-border">
                                    Average Daily Spend
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueAvgDailySpending = 0;
                                    int totalCountAvgDailySpending = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        $@Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].AvgDailySpending), 2)

                                                    </td>
                                                    ++totalCountAvgDailySpending;
                                                    totalValueAvgDailySpending += (decimal)(decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[index].AvgDailySpending;
                                                }
                                            }
                                        }
                                    }
                                    <td style="text-align: right;" class="td-border">
                                        @if (totalCountAvgDailySpending != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueAvgDailySpending / totalCountAvgDailySpending),2)
                                            //$
                                        }
                                    </td>
                                }
                            </tr>
                            @*AvgDailySpending end*@

                            @*IncomeExpenseRatio start*@
                            <tr>
                                <td class="td-border">
                                    Income/Expense Ratio
                                </td>

                                @if (FilteredValue.Count > 0)
                                {
                                    decimal totalValueIncomeExpenseRatio = 0;
                                    int totalCountIncomeExpenseRatio = 0;
                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (@Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        @Math.Round(Convert.ToDecimal(@Model.CalendarMonthStatistics[index].MonthlyAnalyses[0].IncomeExpenseRatio), 2)

                                                    </td>
                                                    ++totalCountIncomeExpenseRatio;
                                                    totalValueIncomeExpenseRatio += (decimal)@Model.CalendarMonthStatistics[index].MonthlyAnalyses[0].IncomeExpenseRatio;
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                        @if (totalCountIncomeExpenseRatio != 0)
                                        {
                                            @Math.Round(Convert.ToDecimal(totalValueIncomeExpenseRatio / totalCountIncomeExpenseRatio),2)
                                        }
                                    </td>
                                }
                            </tr>
                            @*IncomeExpenseRatio end*@

                            @*RIKI*@
                            <tr>
                                <td class="td-border">
                                    RIKI
                                </td>

                                @if (FilteredValue.Count > 0)
                                {

                                    @foreach (var headerdate in FilteredValue)
                                    {
                                        if (@Model.CalendarMonthStatistics.Count > 0)
                                        {
                                            @for (int index = 0; index < @Model.CalendarMonthStatistics.Count; index++)
                                            {
                                                if (Model.RikiData != null && @Model.CalendarMonthStatistics[index].Label == headerdate.ActualValue.ToString("MM/yyyy"))
                                                {
                                                    <td class="td-border" style="text-align: right;">
                                                        @Math.Round((float)(@Model.RikiData?.RIKI), 2)

                                                    </td>
                                                }
                                            }
                                        }
                                    }
                                    <td class="td-border" style="text-align: right;">
                                    </td>
                                }
                            </tr>
                            @*RIKI*@
                        }
                    }
                </table>
                @*daysinmonth table end*@
            </td>
        </tr>

        <tr>
            <td align="center" colspan="2" style="padding: 30px 0;">
                <span style="background: linear-gradient(90deg, rgba(193, 139, 64, 0) -30%, rgba(193, 57, 19, 1) 27%, rgba(36, 112, 230, 1) 46%, rgba(62, 200, 159, 1) 72%, rgba(47, 237, 237, 1) 100%, rgba(245, 250, 255, 1) 100%);height: 1px;display: block;"></span>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding-bottom: 15px;">
                <p style="font-size: 18px; font-weight: 500; margin: 0; font-family: 'Roboto', sans-serif;">
                    Income Analysis
                </p>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <table width: 100%;>
                    <tr>
                        <td style="width: 33.3%; padding-right: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2" style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Typical Monthly Income
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            $ @(Model.RikiData != null ? $"{Model.RikiData?.TypicalMonthsTotalIncome}" : "N/A")
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 15px;">
                                        <p style="color: #777; margin: 0; font-size: 11px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            Average of typical months.
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <p style="font-size: 11px; margin: 0; font-family: 'Roboto', sans-serif;">
                                            <span style="color: #5d1fc9; font-weight: bold;">Monthly Income Trend:</span>
                                            Approximately constant.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 33.3%; padding-right: 10px; padding-left: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Typical Monthly Residual Income
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            $ @(Model.RikiData != null ? $"{Model.RikiData?.TypicalMonthsAdjustedAvailableIncome}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 33px;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Unspent income, average of typical months.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 33.3%; padding-right: 10px; padding-left: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Month-to-Month Stability Score
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            $ @(Model.RikiData != null ? $"{Model.RikiData?.MonthToMonthStabilityScore}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 33px;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Scale centered on 100.
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom:10px;">
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td align="center" colspan="2" style="padding: 30px 0;">
                <span style="background: linear-gradient(90deg, rgba(193, 139, 64, 0) -30%, rgba(193, 57, 19, 1) 27%, rgba(36, 112, 230, 1) 46%, rgba(62, 200, 159, 1) 72%, rgba(47, 237, 237, 1) 100%, rgba(245, 250, 255, 1) 100%);height: 1px;display: block;"></span>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding-bottom: 15px;">
                <p style="font-size: 18px; font-weight: 500; margin: 0; font-family: 'Roboto', sans-serif;">
                    Rent Verification
                </p>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 33.3%; padding-right: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2" style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Consecutive Recognized Payments
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            $ @(Model.RentVerification != null ? $"{Model.RentVerification?.NumberConsecutiveRentPayments}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 0px;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Number of consecutive payments recognized as rent.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 33.3%; padding-right: 10px; padding-left: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Consecutive Candidate Payments
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            @(Model.RentVerification != null ? $"{Model.RentVerification?.NumberCandidateRentPayments}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 0;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Number of consecutive payments categorized as potential rent.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 33.3%; padding-right: 10px; padding-left: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2" style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Stated Rent Amount
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            @(Model.RentVerification != null ? $"{Model.RentVerification?.StatedRentAmount}" : "N/A")

                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 13px;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Rent payment from URLA.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding: 0;">
                <table style="width: 100%; border-spacing: 5px;padding-bottom:25px">
                    <tr>
                        <th style="font-family: 'Roboto', sans-serif; text-align: left; font-weight: 500; border-radius: 4px; padding: 5px 10px; background-color: #919191; color: #fff; font-size: 11px;">
                            Date
                        </th>
                        <th style="font-family: 'Roboto', sans-serif; text-align: left; font-weight: 500; border-radius: 4px; padding: 5px 10px; background-color: #919191; color: #fff; font-size: 11px;">
                            Amount
                        </th>
                        <th style="font-family: 'Roboto', sans-serif; text-align: left; font-weight: 500; border-radius: 4px; padding: 5px 10px; background-color: #919191; color: #fff; font-size: 11px;">
                            Acct. #
                        </th>
                        <th style="font-family: 'Roboto', sans-serif; text-align: left; font-weight: 500; border-radius: 4px; padding: 5px 10px; background-color: #919191; color: #fff; font-size: 11px;">
                            Description
                        </th>

                    </tr>

                    @*rent table*@
                    @if (@Model.GroupedTransactions != null && @Model.GroupedTransactions.Count != 0)
                    {
                        @foreach (var grouptransaction in @Model.GroupedTransactions)
                        {
                            @if (@grouptransaction.GroupType.Split("__")[0] == "RENT" && @grouptransaction.GroupedAccountData != null && @grouptransaction.GroupedAccountData.Count != 0)
                            {
                                @foreach (var groupaccountdata in grouptransaction.GroupedAccountData)
                                {
                                    @if (@groupaccountdata.Transactions != null && @groupaccountdata.Transactions.Count != 0)
                                    {
                                        @foreach (var transaction in @groupaccountdata.Transactions)
                                        {
                                            <tr>
                                                <td style="font-family: 'Roboto' , sans-serif;font-size: 11px;border-radius: 4px;
                            border:1.5px solid #ddd;padding:5px 10px;">
                                                    @transaction.Date.ToShortDateString()
                                                </td>
                                                <td style=" font-family: 'Roboto' , sans-serif;font-size: 11px;border-radius: 4px;
                            border:1.5px solid #ddd;padding:5px 10px;">
                                                    $ @transaction.Amount
                                                </td>
                                                <td style="font-family: 'Roboto' , sans-serif;font-size: 11px;border-radius: 4px;
                            border:1.5px solid #ddd;padding:5px 10px;">
                                                    @groupaccountdata.AccountNumber
                                                </td>
                                                <td style="font-family: 'Roboto' , sans-serif;font-size: 11px;border-radius: 4px;
                            border:1.5px solid #ddd;padding:5px 10px;">
                                                    @transaction.Description
                                                </td>
                                            </tr>
                                        }
                                    }
                                }
                            }
                        }
                    }
                    @*rent table*@

                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding-bottom: 15px;">
                <p style="font-size: px; font-weight: 500; margin: 0; font-family: 'Roboto', sans-serif;">
                    Other Recurring Payments
                </p>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <table style="width: 100%;">
                    <tr>
                        <td style="width: 50%; padding-right: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2"
                                        style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Consecutive Recognized Utility Payments
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            N/A
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 0;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Consecutive months of consistent utility payments.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                        <td style="width: 50%; padding-left: 10px; vertical-align: text-top;">
                            <table class="table-border">
                                <tr>
                                    <td colspan="2" style="background: linear-gradient(90deg, rgba(2, 0, 36, 1) 0%, rgba(93, 31, 201, 1) 0%, rgba(180, 78, 218, 1) 100%);padding: 6px 10px 7px;border-radius: 4px;color: #fff;font-size: 11px;font-family: 'Roboto', sans-serif;">
                                        Average Monthly Utility Payment
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding: 15px 0;">
                                        <p style="color: #777; margin: 0; font-size: 30px; font-weight: 500; text-align: center; font-family: 'Roboto', sans-serif;">
                                            N/A
                                        </p>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="padding-bottom: 0;">
                                        <p style="font-size: 11px; margin: 0; font-weight: 500; font-family: 'Roboto', sans-serif;">
                                            Average monthly amount.
                                        </p>
                                    </td>
                                </tr>
                            </table>
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding: 30px 0;">
                @*Other table start*@
                <table class="calender-table" style="width: 100%; border-spacing: 5px;">
                    @{
                        List<HeaderResponse> UniqueFormattedOtherDates = new List<HeaderResponse>();

                        //updated header sep -8
                        <tr>
                            <th></th>
                            @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0){
                                @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.Split("__")[0] != "INCOME"
                                    && gt.GroupType.Split("__")[0] != "EXPENSES" && gt.GroupedAccountData.Count > 0))
                                {
                                    foreach (var groupedaccountdata in ((IEnumerable<dynamic>)groupedtransaction.GroupedAccountData).Where(gad => gad.Transactions.Count > 0))
                                    {
                                        foreach (var transaction in groupedaccountdata.Transactions)
                                        {
                                            if (DateTime.TryParseExact(transaction.Date.ToString("yyyy-MM-ddTHH:mm:ss"), "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate)
                                            && UniqueFormattedOtherDates.Count < 8)
                                            {
                                                string formattedDate = parsedDate.ToString("MMM-yy");
                                                bool exists = UniqueFormattedOtherDates.Any(value => value.FormattedValue == formattedDate);

                                                if (!exists)
                                                {
                                                    HeaderResponse uniqueformatteddate = new HeaderResponse();
                                                    uniqueformatteddate.ActualValue = transaction.Date;
                                                    uniqueformatteddate.FormattedValue = formattedDate;
                                                    UniqueFormattedOtherDates.Add(uniqueformatteddate);

                                                    <th style="
                                                  font-family: 'Roboto', sans-serif;
                                                  text-align: center;
                                                  font-weight: 500;
                                                  font-size: 9px;
                                                  border-radius: 4px;
                                                  background-color: #919191;
                                                  color: #fff;
                                                  white-space: nowrap;
                                                ">
                                                        @formattedDate
                                                    </th>
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        </tr>
                        //upadted header sep-8

                        @*other data binding start*@

                        //updated data binding -sep 8
                        @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0)
                        {
                            @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.Split("__")[0] != "INCOME" &&
                            gt.GroupType.Split("__")[0] != "EXPENSES" && gt.GroupedAccountData.Count > 0 && UniqueFormattedDates.Count > 0))
                            {
                                var splitGroupTypeName = groupedtransaction.GroupType.Replace("__", " ").Replace("_", " ");
                                <tr>
                                    <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px;
                                        width:5% !important">
                                        @splitGroupTypeName
                                    </td>


                                    @foreach (var headervalue in UniqueFormattedOtherDates)
                                    {

                                        var filteredData = from gad in (IEnumerable<dynamic>)groupedtransaction.GroupedAccountData
                                                           where gad.Transactions.Count > 0
                                                           from transaction in (IEnumerable<dynamic>)gad.Transactions
                                                           where transaction.Date.Year == headervalue.ActualValue.Year && transaction.Date.Month == headervalue.ActualValue.Month
                                                           select transaction;


                                        float totalAmount = float.NaN;
                                        if (@filteredData.Count() > 0)
                                        {

                                            totalAmount = (float)Math.Round(Convert.ToDecimal(filteredData.Sum(z => (float)z.Amount)), 2);
                                        }

                                        <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px; white-space: nowrap; text-align: right;">
                                            @(filteredData.Count() > 0 ? (!float.IsNaN(totalAmount) ? $"${@totalAmount}" : "-") : "-")
                                        </td>

                                    }
                                </tr>
                            }
                        }
                        //updated data binding - sep 8

                        @*other data binding end*@
                    }
                </table>
                @*other table start*@
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <p style="margin: 0; font-size: 25px; font-weight: 500; font-family: 'Roboto', sans-serif;">
                    Income & Expense Summary
                </p>
            </td>
        </tr>
        <tr>
            <td colspan="2" style="padding: 15px 0 20px;">
                <p style="margin: 0; font-size: 18px; font-weight: 400; font-family: 'Roboto', sans-serif;">
                    Monthly Income
                </p>
            </td>
        </tr>

        <tr>
            <td colspan="2">
                @*Income table start*@
                <table class="calender-table" style="width: 100%; border-spacing: 5px;">
                    @{
                        List<HeaderResponse> UniqueFormattedIncomeDates = new List<HeaderResponse>();

                        //updated header -sep 8
                        <tr>
                            <th></th>
                            @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0)
                            {
                            @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.StartsWith("INCOME") && gt.GroupedAccountData.Count > 0))
                            {
                                foreach (var groupedaccountdata in ((IEnumerable<dynamic>)groupedtransaction.GroupedAccountData).Where(gad => gad.Transactions.Count > 0))
                                {
                                    foreach (var transaction in groupedaccountdata.Transactions)
                                    {
                                        if (DateTime.TryParseExact(transaction.Date.ToString("yyyy-MM-ddTHH:mm:ss"), "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture,
                                        DateTimeStyles.None, out DateTime parsedDate)
                                        && UniqueFormattedIncomeDates.Count < 8)
                                        {
                                            string formattedDate = parsedDate.ToString("MMM-yy");
                                            bool exists = UniqueFormattedIncomeDates.Any(value => value.FormattedValue == formattedDate);

                                            if (!exists)
                                            {
                                                HeaderResponse uniqueformatteddate = new HeaderResponse();
                                                uniqueformatteddate.ActualValue = transaction.Date;
                                                uniqueformatteddate.FormattedValue = formattedDate;
                                                UniqueFormattedIncomeDates.Add(uniqueformatteddate);
                                            }
                                        }
                                    }
                                }
                            }

                            
                                UniqueFormattedIncomeDates = UniqueFormattedIncomeDates.OrderBy(date => date.ActualValue).ToList();
                                foreach (var incomeheader in UniqueFormattedIncomeDates)
                                {

                                    <th style="
                                                          font-family: 'Roboto', sans-serif;
                                                          text-align: center;
                                                          font-weight: 500;
                                                          font-size: 9px;
                                                          border-radius: 4px;
                                                          background-color: #919191;
                                                          color: #fff;
                                                          white-space: nowrap;
                                                        ">
                                        @incomeheader.FormattedValue
                                    </th>
                                }
                            }

                        </tr>
            //updated header - sep8

                        @*Income data binding start*@

                        //updated data binding - sep 8

                        @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0)
                        {
                        @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.Split("__")[0] == "INCOME" && gt.GroupedAccountData.Count > 0 && UniqueFormattedDates.Count > 0))
                        {
                            var splitGroupTypeName = groupedtransaction.GroupType.Replace("__", " ").Replace("_", " ").Replace("INCOME", "");
                            <tr>
                                <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px;
                                       width:5% !important">
                                    @splitGroupTypeName
                                </td>
                                @foreach (var headervalue in UniqueFormattedIncomeDates)
                                {

                                    var filteredData = from gad in (IEnumerable<dynamic>)groupedtransaction.GroupedAccountData
                                                       where gad.Transactions.Count > 0
                                                       from transaction in (IEnumerable<dynamic>)gad.Transactions
                                                       where transaction.Date.Year == headervalue.ActualValue.Year && transaction.Date.Month == headervalue.ActualValue.Month
                                                       select transaction;


                                    float totalAmount = float.NaN;
                                    if (@filteredData.Count() > 0)
                                    {
                                        totalAmount = (float)Math.Round(Convert.ToDecimal(filteredData.Sum(z => (float)z.Amount)), 2);
                                    }


                                    <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px; white-space: nowrap; text-align: right;">
                                        @(filteredData.Count() > 0 ? (!float.IsNaN(totalAmount) ? $"${@totalAmount}" : "-") : "-")
                                    </td>
                                }

                            </tr>
                        }
                        }

                        //updated data binding - sep 8

                        @*Income data binding end*@
                    }
                </table>
                @*Income table start*@
            </td>
        </tr>
        <tr>
            <td align="center" colspan="2" style="padding: 30px 0;">
                <span style="background: linear-gradient(90deg, rgba(193, 139, 64, 0) -30%, rgba(193, 57, 19, 1) 27%, rgba(36, 112, 230, 1) 46%, rgba(62, 200, 159, 1) 72%, rgba(47, 237, 237, 1) 100%, rgba(245, 250, 255, 1) 100%); height: 1px; display: block;"></span>
            </td>
        </tr>
        <tr>
            <td colspan="2">
                <p style="margin: 0; font-size: 18px; font-weight: 400; font-family: 'Roboto', sans-serif;">
                    Monthly Expenses
                </p>
            </td>
        </tr>
       
        <tr>
            <td colspan="2">
                @*Expense table start*@
                <table class="calender-table" style="width: 100%; border-spacing: 5px;">
                    @{
                        List<HeaderResponse> UniqueFormattedExpenseDates = new List<HeaderResponse>();

                        //updated header -sep 8
                        <tr>
                            <th></th>
                            @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0)
                            {
                            @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.StartsWith("EXPENSES") && gt.GroupedAccountData.Count > 0))
                            {
                                foreach (var groupedaccountdata in ((IEnumerable<dynamic>)groupedtransaction.GroupedAccountData).Where(gad => gad.Transactions.Count > 0))
                                {
                                    foreach (var transaction in groupedaccountdata.Transactions)
                                    {
                                        if (DateTime.TryParseExact(transaction.Date.ToString("yyyy-MM-ddTHH:mm:ss"), "yyyy-MM-ddTHH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedDate)
                                        && UniqueFormattedExpenseDates.Count < 8)
                                        {
                                            string formattedDate = parsedDate.ToString("MMM-yy");
                                            bool exists = UniqueFormattedExpenseDates.Any(value => value.FormattedValue == formattedDate);

                                            if (!exists)
                                            {
                                                HeaderResponse uniqueformatteddate = new HeaderResponse();
                                                uniqueformatteddate.ActualValue = transaction.Date;
                                                uniqueformatteddate.FormattedValue = formattedDate;
                                                UniqueFormattedExpenseDates.Add(uniqueformatteddate);
                                            }
                                        }
                                    }

                                }
                            }

                            
                            UniqueFormattedExpenseDates = UniqueFormattedExpenseDates.OrderBy(date => date.ActualValue).ToList();
                            @foreach (var expenseheader in UniqueFormattedExpenseDates)
                            {

                            <th style="
                                                      font-family: 'roboto', sans-serif;
                                                      text-align: center;
                                                      font-weight: 500;
                                                      font-size: 9px;
                                                      border-radius: 4px;
                                                      background-color: #919191;
                                                      color: #fff;
                                                      white-space: nowrap;
                                                    ">
                                @expenseheader.FormattedValue
                            </th>
                            }
                            }


                         </tr>
                        //updated header - sep 8


                        @*Expense data bindng start*@

                        //updated data binding - sep 8
                        @if (Model.GroupedTransactions != null && Model.GroupedTransactions.Count > 0){
                        @foreach (var groupedtransaction in ((IEnumerable<dynamic>)Model.GroupedTransactions).Where(gt => gt.GroupType.Split("__")[0] == "EXPENSES" 
                        && gt.GroupedAccountData.Count > 0 && UniqueFormattedDates.Count > 0))
                        {
                            var splitGroupTypeName = groupedtransaction.GroupType.Replace("__", " ").Replace("_", " ").Replace("EXPENSES", "");
                            <tr>
                                <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px; 
                                width:5% !important">@splitGroupTypeName</td>
                                @foreach (var headervalue in UniqueFormattedExpenseDates)
                                {
                                    var filteredData = from gad in (IEnumerable<dynamic>)groupedtransaction.GroupedAccountData
                                                       where gad.Transactions.Count > 0
                                                       from transaction in (IEnumerable<dynamic>)gad.Transactions
                                                       where transaction.Date.Year == headervalue.ActualValue.Year && transaction.Date.Month == headervalue.ActualValue.Month
                                                       select transaction;

                                    float totalAmount = float.NaN;
                                    if (@filteredData.Count() > 0)
                                    {
                                        totalAmount = (float)Math.Round(Convert.ToDecimal(filteredData.Sum(z => (float)z.Amount)), 2);
                                    }

                                        <td style="font-family: 'Roboto', sans-serif; font-size: 9px; border-radius: 4px; border: 1.5px solid #ddd; padding: 5px 10px; white-space: nowrap; text-align: right;">
                                        @(filteredData.Count() > 0 ? (!float.IsNaN(totalAmount) ? $"${@totalAmount}" : "-") : "-")
                                        </td>
                                }
                            </tr>
                        }
                        }

                        @*//updated data binding  -sep 8*@
                                                
                        @*Expense data binding end*@
                    }
                </table>
                @*Expense table end*@
            </td>
        </tr>
    </table>
</body>
</html>